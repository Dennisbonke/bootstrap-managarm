From b9a0979d3c95afba1471c35a6d01a8b43e64ed3f Mon Sep 17 00:00:00 2001
From: Dennis Bonke <admin@dennisbonke.com>
Date: Wed, 2 Aug 2023 04:22:24 +0200
Subject: [PATCH 1/2] Add initial Managarm support

Signed-off-by: Dennis Bonke <admin@dennisbonke.com>
---
 Cargo.lock                                    |  12 +-
 Cargo.toml                                    |   1 +
 .../src/spec/managarm_system_base.rs          |  36 +++++
 compiler/rustc_target/src/spec/mod.rs         |   3 +
 .../spec/x86_64_unknown_managarm_system.rs    |  19 +++
 library/std/Cargo.toml                        |   2 +-
 library/std/build.rs                          |   1 +
 library/std/src/lib.rs                        |   2 +-
 library/std/src/os/managarm/fs.rs             | 148 ++++++++++++++++++
 library/std/src/os/managarm/mod.rs            |   6 +
 library/std/src/os/managarm/raw.rs            |  74 +++++++++
 library/std/src/os/mod.rs                     |   2 +
 library/std/src/os/unix/mod.rs                |   2 +
 library/std/src/sys/unix/args.rs              |   1 +
 library/std/src/sys/unix/env.rs               |  11 ++
 library/std/src/sys/unix/fs.rs                |   1 +
 library/std/src/sys/unix/os.rs                |  34 +++-
 library/std/src/sys/unix/thread.rs            |   7 +
 library/std/src/sys/unix/thread_local_dtor.rs |   2 +-
 library/unwind/build.rs                       |   2 +
 src/bootstrap/Cargo.lock                      |  12 ++
 src/tools/rust-analyzer/Cargo.lock            |  12 ++
 22 files changed, 381 insertions(+), 9 deletions(-)
 create mode 100644 compiler/rustc_target/src/spec/managarm_system_base.rs
 create mode 100644 compiler/rustc_target/src/spec/x86_64_unknown_managarm_system.rs
 create mode 100644 library/std/src/os/managarm/fs.rs
 create mode 100644 library/std/src/os/managarm/mod.rs
 create mode 100644 library/std/src/os/managarm/raw.rs

diff --git a/Cargo.lock b/Cargo.lock
index 8b097249..a065f0f8 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1988,9 +1988,7 @@ checksum = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55"
 
 [[package]]
 name = "libc"
-version = "0.2.143"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "edc207893e85c5d6be840e969b496b53d94cec8be2d501b214f50daa97fa8024"
+version = "0.2.147"
 dependencies = [
  "rustc-std-workspace-core",
 ]
@@ -5911,3 +5909,11 @@ dependencies = [
  "syn 1.0.102",
  "synstructure 0.12.6",
 ]
+
+[[patch.unused]]
+name = "num_cpus"
+version = "1.13.0"
+
+[[patch.unused]]
+name = "users"
+version = "0.11.0"
diff --git a/Cargo.toml b/Cargo.toml
index 8eb378af..c366dc81 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -107,6 +107,7 @@ object.debug = 0
 rustc-std-workspace-core = { path = 'library/rustc-std-workspace-core' }
 rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }
 rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }
+libc = { path = '../rust-libc' }
 
 [patch."https://github.com/rust-lang/rust-clippy"]
 clippy_lints = { path = "src/tools/clippy/clippy_lints" }
diff --git a/compiler/rustc_target/src/spec/managarm_system_base.rs b/compiler/rustc_target/src/spec/managarm_system_base.rs
new file mode 100644
index 00000000..53e2b0f0
--- /dev/null
+++ b/compiler/rustc_target/src/spec/managarm_system_base.rs
@@ -0,0 +1,36 @@
+use crate::spec::{Cc, LinkArgs, LinkerFlavor, Lld, RelroLevel, TargetOptions};
+
+use super::cvs;
+
+pub fn opts() -> TargetOptions {
+    let mut args = LinkArgs::new();
+    args.insert(
+        LinkerFlavor::Gnu(Cc::Yes, Lld::No),
+        vec![
+            // We want to be able to strip as much executable code as possible
+            // from the linker command line, and this flag indicates to the
+            // linker that it can avoid linking in dynamic libraries that don't
+            // actually satisfy any symbols up to that point (as with many other
+            // resolutions the linker does). This option only applies to all
+            // following libraries so we're sure to pass it as one of the first
+            // arguments.
+            "-Wl,--as-needed".to_string().into(),
+            // Always enable NX protection when it is available
+            "-Wl,-z,noexecstack".to_string().into(),
+        ],
+    );
+
+    TargetOptions {
+        os: "managarm".to_string().into(),
+        dynamic_linking: true,
+        executables: true,
+        families: cvs!["unix"],
+        has_rpath: true,
+        pre_link_args: args,
+        position_independent_executables: true,
+        relro_level: RelroLevel::Full,
+        has_thread_local: true,
+        crt_static_respected: true,
+        ..Default::default()
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index ba4b89c9..486fcb47 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -67,6 +67,7 @@
 mod freebsd_base;
 mod fuchsia_base;
 mod haiku_base;
+mod managarm_system_base;
 mod hermit_base;
 mod illumos_base;
 mod l4re_base;
@@ -1111,6 +1112,8 @@ fn $module() {
     ("i686-unknown-haiku", i686_unknown_haiku),
     ("x86_64-unknown-haiku", x86_64_unknown_haiku),
 
+    ("x86_64-unknown-managarm-system", x86_64_unknown_managarm_system),
+
     ("aarch64-apple-darwin", aarch64_apple_darwin),
     ("x86_64-apple-darwin", x86_64_apple_darwin),
     ("x86_64h-apple-darwin", x86_64h_apple_darwin),
diff --git a/compiler/rustc_target/src/spec/x86_64_unknown_managarm_system.rs b/compiler/rustc_target/src/spec/x86_64_unknown_managarm_system.rs
new file mode 100644
index 00000000..252d11c0
--- /dev/null
+++ b/compiler/rustc_target/src/spec/x86_64_unknown_managarm_system.rs
@@ -0,0 +1,19 @@
+use crate::spec::{Cc, LinkerFlavor, Lld, StackProbeType, Target};
+
+pub fn target() -> Target {
+    let mut base = super::managarm_system_base::opts();
+    base.cpu = "x86-64".to_string().into();
+    base.max_atomic_width = Some(64);
+    base.pre_link_args.get_mut(&LinkerFlavor::Gnu(Cc::Yes, Lld::No)).unwrap().push("-m64".to_string().into());
+    // don't use probe-stack=inline-asm until rust-lang/rust#83139 is resolved.
+    base.stack_probes = StackProbeType::Call;
+
+    Target {
+        llvm_target: "x86_64-unknown-managarm-system".to_string().into(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
+            .to_string().into(),
+        arch: "x86_64".to_string().into(),
+        options: base,
+    }
+}
diff --git a/library/std/Cargo.toml b/library/std/Cargo.toml
index 09afc696..bc1758f0 100644
--- a/library/std/Cargo.toml
+++ b/library/std/Cargo.toml
@@ -15,7 +15,7 @@ cfg-if = { version = "1.0", features = ['rustc-dep-of-std'] }
 panic_unwind = { path = "../panic_unwind", optional = true }
 panic_abort = { path = "../panic_abort" }
 core = { path = "../core" }
-libc = { version = "0.2.143", default-features = false, features = ['rustc-dep-of-std'] }
+libc = { path = "../../../rust-libc", default-features = false, features = ['rustc-dep-of-std'] }
 compiler_builtins = { version = "0.1.92" }
 profiler_builtins = { path = "../profiler_builtins", optional = true }
 unwind = { path = "../unwind" }
diff --git a/library/std/build.rs b/library/std/build.rs
index 0fb03c8e..9f1d8820 100644
--- a/library/std/build.rs
+++ b/library/std/build.rs
@@ -27,6 +27,7 @@ fn main() {
         || target.contains("l4re")
         || target.contains("redox")
         || target.contains("haiku")
+        || target.contains("managarm")
         || target.contains("vxworks")
         || target.contains("wasm32")
         || target.contains("wasm64")
diff --git a/library/std/src/lib.rs b/library/std/src/lib.rs
index 318a46d1..bb33c3bc 100644
--- a/library/std/src/lib.rs
+++ b/library/std/src/lib.rs
@@ -604,7 +604,7 @@ pub mod arch {
 mod panicking;
 mod personality;
 
-#[path = "../../backtrace/src/lib.rs"]
+#[path = "../../../../rust-backtrace/src/lib.rs"]
 #[allow(dead_code, unused_attributes, fuzzy_provenance_casts)]
 mod backtrace_rs;
 
diff --git a/library/std/src/os/managarm/fs.rs b/library/std/src/os/managarm/fs.rs
new file mode 100644
index 00000000..58205f11
--- /dev/null
+++ b/library/std/src/os/managarm/fs.rs
@@ -0,0 +1,148 @@
+#![stable(feature = "metadata_ext", since = "1.1.0")]
+
+use crate::fs::Metadata;
+use crate::sys_common::AsInner;
+
+#[allow(deprecated)]
+use crate::os::managarm::raw;
+
+/// OS-specific extensions to [`fs::Metadata`].
+///
+/// [`fs::Metadata`]: crate::fs::Metadata
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+pub trait MetadataExt {
+    /// Gain a reference to the underlying `stat` structure which contains
+    /// the raw information returned by the OS.
+    ///
+    /// The contents of the returned `stat` are **not** consistent across
+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the
+    /// cross-Unix abstractions contained within the raw stat.
+    #[stable(feature = "metadata_ext", since = "1.1.0")]
+    #[deprecated(
+        since = "1.8.0",
+        note = "deprecated in favor of the accessor \
+                  methods of this trait"
+    )]
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_dev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ino(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mode(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_nlink(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_uid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_gid(&self) -> u32;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_rdev(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_size(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_atime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_mtime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_ctime_nsec(&self) -> i64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blksize(&self) -> u64;
+
+    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+    fn st_blocks(&self) -> u64;
+}
+
+#[stable(feature = "metadata_ext", since = "1.1.0")]
+impl MetadataExt for Metadata {
+    #[allow(deprecated)]
+    fn as_raw_stat(&self) -> &raw::stat {
+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat as *const raw::stat) }
+    }
+
+    fn st_dev(&self) -> u64 {
+        self.as_inner().as_inner().st_dev as u64
+    }
+
+    fn st_ino(&self) -> u64 {
+        self.as_inner().as_inner().st_ino as u64
+    }
+
+    fn st_mode(&self) -> u32 {
+        self.as_inner().as_inner().st_mode as u32
+    }
+
+    fn st_nlink(&self) -> u64 {
+        self.as_inner().as_inner().st_nlink as u64
+    }
+
+    fn st_uid(&self) -> u32 {
+        self.as_inner().as_inner().st_uid as u32
+    }
+
+    fn st_gid(&self) -> u32 {
+        self.as_inner().as_inner().st_gid as u32
+    }
+
+    fn st_rdev(&self) -> u64 {
+        self.as_inner().as_inner().st_rdev as u64
+    }
+
+    fn st_size(&self) -> u64 {
+        self.as_inner().as_inner().st_size as u64
+    }
+
+    fn st_atime(&self) -> i64 {
+        self.as_inner().as_inner().st_atime as i64
+    }
+
+    fn st_atime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_atime_nsec as i64
+    }
+
+    fn st_mtime(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime as i64
+    }
+
+    fn st_mtime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_mtime_nsec as i64
+    }
+
+    fn st_ctime(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime as i64
+    }
+
+    fn st_ctime_nsec(&self) -> i64 {
+        self.as_inner().as_inner().st_ctime_nsec as i64
+    }
+
+    fn st_blksize(&self) -> u64 {
+        self.as_inner().as_inner().st_blksize as u64
+    }
+
+    fn st_blocks(&self) -> u64 {
+        self.as_inner().as_inner().st_blocks as u64
+    }
+}
diff --git a/library/std/src/os/managarm/mod.rs b/library/std/src/os/managarm/mod.rs
new file mode 100644
index 00000000..869966bb
--- /dev/null
+++ b/library/std/src/os/managarm/mod.rs
@@ -0,0 +1,6 @@
+//! Managarm-specific definitions
+
+#![stable(feature = "raw_ext", since = "1.1.0")]
+
+pub mod fs;
+pub mod raw;
diff --git a/library/std/src/os/managarm/raw.rs b/library/std/src/os/managarm/raw.rs
new file mode 100644
index 00000000..eabba1c4
--- /dev/null
+++ b/library/std/src/os/managarm/raw.rs
@@ -0,0 +1,74 @@
+#![stable(feature = "raw_ext", since = "1.1.0")]
+#![deprecated(
+    since = "1.8.0",
+    note = "these type aliases are no longer supported by \
+              the standard library, the `libc` crate on \
+              crates.io should be used instead for the correct \
+              definitions"
+)]
+#![allow(deprecated)]
+
+#[stable(feature = "pthread_t", since = "1.8.0")]
+pub type pthread_t = usize; // TODO: This is completely wrong tbh
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type dev_t = libc::dev_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type ino_t = libc::ino_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type mode_t = libc::mode_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type nlink_t = libc::nlink_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type off_t = libc::off_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type time_t = libc::time_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blkcnt_t = libc::blkcnt_t;
+
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub type blksize_t = libc::blksize_t;
+
+#[repr(C)]
+#[derive(Clone)]
+#[stable(feature = "raw_ext", since = "1.1.0")]
+pub struct stat {
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_dev: libc::dev_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ino: libc::ino_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mode: libc::mode_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_nlink: libc::nlink_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_uid: libc::uid_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_gid: libc::gid_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_rdev: libc::dev_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_size: libc::off_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_atime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_mtime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime: libc::time_t,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_ctime_nsec: libc::c_long,
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blksize: libc::blksize_t, 
+    #[stable(feature = "raw_ext", since = "1.1.0")]
+    pub st_blocks: libc::blkcnt_t, 
+}
diff --git a/library/std/src/os/mod.rs b/library/std/src/os/mod.rs
index 5b54cc5f..9c15b442 100644
--- a/library/std/src/os/mod.rs
+++ b/library/std/src/os/mod.rs
@@ -125,6 +125,8 @@ pub mod windows {}
 pub mod l4re;
 #[cfg(target_os = "macos")]
 pub mod macos;
+#[cfg(target_os = "managarm")]
+pub mod managarm;
 #[cfg(target_os = "netbsd")]
 pub mod netbsd;
 #[cfg(target_os = "nto")]
diff --git a/library/std/src/os/unix/mod.rs b/library/std/src/os/unix/mod.rs
index 6fe11111..d926709a 100644
--- a/library/std/src/os/unix/mod.rs
+++ b/library/std/src/os/unix/mod.rs
@@ -63,6 +63,8 @@ mod platform {
     pub use crate::os::linux::*;
     #[cfg(target_os = "macos")]
     pub use crate::os::macos::*;
+    #[cfg(target_os = "managarm")]
+    pub use crate::os::managarm::*;
     #[cfg(target_os = "netbsd")]
     pub use crate::os::netbsd::*;
     #[cfg(target_os = "nto")]
diff --git a/library/std/src/sys/unix/args.rs b/library/std/src/sys/unix/args.rs
index 9ed4d9c1..c3de976a 100644
--- a/library/std/src/sys/unix/args.rs
+++ b/library/std/src/sys/unix/args.rs
@@ -71,6 +71,7 @@ fn next_back(&mut self) -> Option<OsString> {
     target_os = "vxworks",
     target_os = "horizon",
     target_os = "nto",
+    target_os = "managarm",
 ))]
 mod imp {
     use super::Args;
diff --git a/library/std/src/sys/unix/env.rs b/library/std/src/sys/unix/env.rs
index 8c3ef88d..23022ea6 100644
--- a/library/std/src/sys/unix/env.rs
+++ b/library/std/src/sys/unix/env.rs
@@ -239,3 +239,14 @@ pub mod os {
     pub const EXE_SUFFIX: &str = "";
     pub const EXE_EXTENSION: &str = "";
 }
+
+#[cfg(target_os = "managarm")]
+pub mod os {
+    pub const FAMILY: &str = "unix";
+    pub const OS: &str = "managarm";
+    pub const DLL_PREFIX: &str = "lib";
+    pub const DLL_SUFFIX: &str = ".so";
+    pub const DLL_EXTENSION: &str = "so";
+    pub const EXE_SUFFIX: &str = "";
+    pub const EXE_EXTENSION: &str = "";
+}
diff --git a/library/std/src/sys/unix/fs.rs b/library/std/src/sys/unix/fs.rs
index 09e9ae27..f11522ae 100644
--- a/library/std/src/sys/unix/fs.rs
+++ b/library/std/src/sys/unix/fs.rs
@@ -885,6 +885,7 @@ pub fn file_type(&self) -> io::Result<FileType> {
         target_os = "horizon",
         target_os = "vita",
         target_os = "nto",
+        target_os = "managarm",
     ))]
     pub fn ino(&self) -> u64 {
         self.entry.d_ino as u64
diff --git a/library/std/src/sys/unix/os.rs b/library/std/src/sys/unix/os.rs
index 8edfd331..4cc4ed13 100644
--- a/library/std/src/sys/unix/os.rs
+++ b/library/std/src/sys/unix/os.rs
@@ -40,7 +40,7 @@
 }
 
 extern "C" {
-    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+    #[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "managarm")))]
     #[cfg_attr(
         any(
             target_os = "linux",
@@ -71,13 +71,13 @@
 }
 
 /// Returns the platform-specific value of errno
-#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks")))]
+#[cfg(not(any(target_os = "dragonfly", target_os = "vxworks", target_os = "managarm")))]
 pub fn errno() -> i32 {
     unsafe { (*errno_location()) as i32 }
 }
 
 /// Sets the platform-specific value of errno
-#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks")))] // needed for readdir and syscall!
+#[cfg(all(not(target_os = "dragonfly"), not(target_os = "vxworks"), not(target_os = "managarm")))] // needed for readdir and syscall!
 #[allow(dead_code)] // but not all target cfgs actually end up using it
 pub fn set_errno(e: i32) {
     unsafe { *errno_location() = e as c_int }
@@ -111,6 +111,29 @@ pub fn set_errno(e: i32) {
     }
 }
 
+#[cfg(target_os = "managarm")]
+pub fn errno() -> i32 {
+    extern "C" {
+        #[thread_local]
+        static __mlibc_errno: c_int;
+    }
+
+    unsafe { __mlibc_errno as i32 }
+}
+
+#[cfg(target_os = "managarm")]
+#[allow(dead_code)]
+pub fn set_errno(e: i32) {
+    extern "C" {
+        #[thread_local]
+        static mut __mlibc_errno: c_int;
+    }
+
+    unsafe {
+        __mlibc_errno = e;
+    }
+}
+
 /// Gets a detailed string description for the given error number.
 pub fn error_string(errno: i32) -> String {
     extern "C" {
@@ -244,6 +267,11 @@ fn description(&self) -> &str {
     }
 }
 
+#[cfg(target_os = "managarm")]
+pub fn current_exe() -> io::Result<PathBuf> {
+    unimplemented!()
+}
+
 #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))]
 pub fn current_exe() -> io::Result<PathBuf> {
     unsafe {
diff --git a/library/std/src/sys/unix/thread.rs b/library/std/src/sys/unix/thread.rs
index 7307d9b2..14853d27 100644
--- a/library/std/src/sys/unix/thread.rs
+++ b/library/std/src/sys/unix/thread.rs
@@ -160,6 +160,13 @@ pub fn set_name(name: &CStr) {
         }
     }
 
+    #[cfg(target_os = "managarm")]
+    pub fn set_name(name: &CStr) {
+        unsafe {
+            libc::pthread_setname_np(libc::pthread_self(), name.as_ptr());
+        }
+    }
+
     #[cfg(target_os = "netbsd")]
     pub fn set_name(name: &CStr) {
         unsafe {
diff --git a/library/std/src/sys/unix/thread_local_dtor.rs b/library/std/src/sys/unix/thread_local_dtor.rs
index 236d2f2e..a19db54d 100644
--- a/library/std/src/sys/unix/thread_local_dtor.rs
+++ b/library/std/src/sys/unix/thread_local_dtor.rs
@@ -11,7 +11,7 @@
 // Note, however, that we run on lots older linuxes, as well as cross
 // compiling from a newer linux to an older linux, so we also have a
 // fallback implementation to use as well.
-#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox"))]
+#[cfg(any(target_os = "linux", target_os = "fuchsia", target_os = "redox", target_os = "managarm"))]
 pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern "C" fn(*mut u8)) {
     use crate::mem;
     use crate::sys_common::thread_local_dtor::register_dtor_fallback;
diff --git a/library/unwind/build.rs b/library/unwind/build.rs
index 5c3c02fb..9234a0b6 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -21,5 +21,7 @@ fn main() {
         if has_unwind {
             println!("cargo:rustc-cfg=feature=\"system-llvm-libunwind\"");
         }
+    } else if target.contains("managarm") {
+        println!("cargo:rustc-link-lib=gcc_s");
     }
 }
diff --git a/src/bootstrap/Cargo.lock b/src/bootstrap/Cargo.lock
index 8f8778ef..795e2940 100644
--- a/src/bootstrap/Cargo.lock
+++ b/src/bootstrap/Cargo.lock
@@ -924,3 +924,15 @@ name = "yansi"
 version = "0.5.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "09041cd90cf85f7f8b2df60c646f853b7f535ce68f85244eb6731cf89fa498ec"
+
+[[patch.unused]]
+name = "libc"
+version = "0.2.147"
+
+[[patch.unused]]
+name = "num_cpus"
+version = "1.13.0"
+
+[[patch.unused]]
+name = "users"
+version = "0.11.0"
diff --git a/src/tools/rust-analyzer/Cargo.lock b/src/tools/rust-analyzer/Cargo.lock
index 25242c60..d327221b 100644
--- a/src/tools/rust-analyzer/Cargo.lock
+++ b/src/tools/rust-analyzer/Cargo.lock
@@ -2218,3 +2218,15 @@ dependencies = [
  "flate2",
  "time",
 ]
+
+[[patch.unused]]
+name = "libc"
+version = "0.2.147"
+
+[[patch.unused]]
+name = "num_cpus"
+version = "1.13.0"
+
+[[patch.unused]]
+name = "users"
+version = "0.11.0"
-- 
2.40.1

